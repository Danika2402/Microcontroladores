

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Sun May 09 19:43:42 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 2.20
    15                           ; Generated 12/02/2020 GMT
    16                           ; 
    17                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F887 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  008F                     	;# 
    93  0090                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0093                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0095                     	;# 
   101  0096                     	;# 
   102  0097                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009A                     	;# 
   106  009B                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  0105                     	;# 
   112  0107                     	;# 
   113  0108                     	;# 
   114  0109                     	;# 
   115  010C                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  0185                     	;# 
   121  0187                     	;# 
   122  0188                     	;# 
   123  0189                     	;# 
   124  018C                     	;# 
   125  018D                     	;# 
   126  0000                     	;# 
   127  0001                     	;# 
   128  0002                     	;# 
   129  0003                     	;# 
   130  0004                     	;# 
   131  0005                     	;# 
   132  0006                     	;# 
   133  0007                     	;# 
   134  0008                     	;# 
   135  0009                     	;# 
   136  000A                     	;# 
   137  000B                     	;# 
   138  000C                     	;# 
   139  000D                     	;# 
   140  000E                     	;# 
   141  000E                     	;# 
   142  000F                     	;# 
   143  0010                     	;# 
   144  0011                     	;# 
   145  0012                     	;# 
   146  0013                     	;# 
   147  0014                     	;# 
   148  0015                     	;# 
   149  0015                     	;# 
   150  0016                     	;# 
   151  0017                     	;# 
   152  0018                     	;# 
   153  0019                     	;# 
   154  001A                     	;# 
   155  001B                     	;# 
   156  001B                     	;# 
   157  001C                     	;# 
   158  001D                     	;# 
   159  001E                     	;# 
   160  001F                     	;# 
   161  0081                     	;# 
   162  0085                     	;# 
   163  0086                     	;# 
   164  0087                     	;# 
   165  0088                     	;# 
   166  0089                     	;# 
   167  008C                     	;# 
   168  008D                     	;# 
   169  008E                     	;# 
   170  008F                     	;# 
   171  0090                     	;# 
   172  0091                     	;# 
   173  0092                     	;# 
   174  0093                     	;# 
   175  0093                     	;# 
   176  0093                     	;# 
   177  0094                     	;# 
   178  0095                     	;# 
   179  0096                     	;# 
   180  0097                     	;# 
   181  0098                     	;# 
   182  0099                     	;# 
   183  009A                     	;# 
   184  009B                     	;# 
   185  009C                     	;# 
   186  009D                     	;# 
   187  009E                     	;# 
   188  009F                     	;# 
   189  0105                     	;# 
   190  0107                     	;# 
   191  0108                     	;# 
   192  0109                     	;# 
   193  010C                     	;# 
   194  010C                     	;# 
   195  010D                     	;# 
   196  010E                     	;# 
   197  010F                     	;# 
   198  0185                     	;# 
   199  0187                     	;# 
   200  0188                     	;# 
   201  0189                     	;# 
   202  018C                     	;# 
   203  018D                     	;# 
   204  0019                     _TXREG	set	25
   205  0018                     _RCSTAbits	set	24
   206  0008                     _PORTD	set	8
   207  0007                     _PORTC	set	7
   208  0005                     _PORTA	set	5
   209  000C                     _PIR1bits	set	12
   210  009A                     _SPBRGH	set	154
   211  0099                     _SPBRG	set	153
   212  0098                     _TXSTAbits	set	152
   213  008F                     _OSCCONbits	set	143
   214  0088                     _TRISD	set	136
   215  0085                     _TRISA	set	133
   216  0087                     _TRISCbits	set	135
   217  0087                     _TRISC	set	135
   218  0187                     _BAUDCTLbits	set	391
   219  0189                     _ANSELH	set	393
   220  0188                     _ANSEL	set	392
   221                           
   222                           	psect	strings
   223  0003                     __pstrings:
   224  0003                     stringtab:
   225  0003                     __stringtab:
   226  0003                     stringcode:	
   227                           ;	String table - string pointers are 1 byte each
   228                           
   229  0003                     stringdir:
   230  0003  3000               	movlw	high stringdir
   231  0004  008A               	movwf	10
   232  0005  0804               	movf	4,w
   233  0006  0A84               	incf	4,f
   234  0007  0782               	addwf	2,f
   235  0008                     __stringbase:
   236  0008  3400               	retlw	0
   237  0009                     __end_of__stringtab:
   238  0009                     STR_2:
   239  0009  3431               	retlw	49	;'1'
   240  000A  3429               	retlw	41	;')'
   241  000B  3420               	retlw	32	;' '
   242  000C  3444               	retlw	68	;'D'
   243  000D  3465               	retlw	101	;'e'
   244  000E  3473               	retlw	115	;'s'
   245  000F  3470               	retlw	112	;'p'
   246  0010  346C               	retlw	108	;'l'
   247  0011  3465               	retlw	101	;'e'
   248  0012  3467               	retlw	103	;'g'
   249  0013  3461               	retlw	97	;'a'
   250  0014  3472               	retlw	114	;'r'
   251  0015  3420               	retlw	32	;' '
   252  0016  3463               	retlw	99	;'c'
   253  0017  3461               	retlw	97	;'a'
   254  0018  3464               	retlw	100	;'d'
   255  0019  3465               	retlw	101	;'e'
   256  001A  346E               	retlw	110	;'n'
   257  001B  3461               	retlw	97	;'a'
   258  001C  3420               	retlw	32	;' '
   259  001D  3464               	retlw	100	;'d'
   260  001E  3465               	retlw	101	;'e'
   261  001F  3420               	retlw	32	;' '
   262  0020  3463               	retlw	99	;'c'
   263  0021  3461               	retlw	97	;'a'
   264  0022  3472               	retlw	114	;'r'
   265  0023  3461               	retlw	97	;'a'
   266  0024  3463               	retlw	99	;'c'
   267  0025  3474               	retlw	116	;'t'
   268  0026  3465               	retlw	101	;'e'
   269  0027  3472               	retlw	114	;'r'
   270  0028  3465               	retlw	101	;'e'
   271  0029  3473               	retlw	115	;'s'
   272  002A  3420               	retlw	32	;' '
   273  002B  340D               	retlw	13
   274  002C  3400               	retlw	0
   275  002D                     STR_1:
   276  002D  34C2               	retlw	-62
   277  002E  34BF               	retlw	-65
   278  002F  3451               	retlw	81	;'Q'
   279  0030  3475               	retlw	117	;'u'
   280  0031  3465               	retlw	101	;'e'
   281  0032  3420               	retlw	32	;' '
   282  0033  3461               	retlw	97	;'a'
   283  0034  3463               	retlw	99	;'c'
   284  0035  3463               	retlw	99	;'c'
   285  0036  3469               	retlw	105	;'i'
   286  0037  34C3               	retlw	-61
   287  0038  34B3               	retlw	-77
   288  0039  346E               	retlw	110	;'n'
   289  003A  3420               	retlw	32	;' '
   290  003B  3464               	retlw	100	;'d'
   291  003C  3465               	retlw	101	;'e'
   292  003D  3473               	retlw	115	;'s'
   293  003E  3465               	retlw	101	;'e'
   294  003F  3461               	retlw	97	;'a'
   295  0040  3420               	retlw	32	;' '
   296  0041  3465               	retlw	101	;'e'
   297  0042  346A               	retlw	106	;'j'
   298  0043  3465               	retlw	101	;'e'
   299  0044  3463               	retlw	99	;'c'
   300  0045  3475               	retlw	117	;'u'
   301  0046  3474               	retlw	116	;'t'
   302  0047  3461               	retlw	97	;'a'
   303  0048  3472               	retlw	114	;'r'
   304  0049  343F               	retlw	63	;'?'
   305  004A  3420               	retlw	32	;' '
   306  004B  340D               	retlw	13
   307  004C  3400               	retlw	0
   308  004D                     STR_4:
   309  004D  3433               	retlw	51	;'3'
   310  004E  3429               	retlw	41	;')'
   311  004F  3420               	retlw	32	;' '
   312  0050  3443               	retlw	67	;'C'
   313  0051  3461               	retlw	97	;'a'
   314  0052  346D               	retlw	109	;'m'
   315  0053  3462               	retlw	98	;'b'
   316  0054  3469               	retlw	105	;'i'
   317  0055  3461               	retlw	97	;'a'
   318  0056  3472               	retlw	114	;'r'
   319  0057  3420               	retlw	32	;' '
   320  0058  3450               	retlw	80	;'P'
   321  0059  344F               	retlw	79	;'O'
   322  005A  3452               	retlw	82	;'R'
   323  005B  3454               	retlw	84	;'T'
   324  005C  3444               	retlw	68	;'D'
   325  005D  3420               	retlw	32	;' '
   326  005E  340D               	retlw	13
   327  005F  340D               	retlw	13
   328  0060  3400               	retlw	0
   329  0061                     STR_3:
   330  0061  3432               	retlw	50	;'2'
   331  0062  3429               	retlw	41	;')'
   332  0063  3420               	retlw	32	;' '
   333  0064  3443               	retlw	67	;'C'
   334  0065  3461               	retlw	97	;'a'
   335  0066  346D               	retlw	109	;'m'
   336  0067  3462               	retlw	98	;'b'
   337  0068  3469               	retlw	105	;'i'
   338  0069  3461               	retlw	97	;'a'
   339  006A  3472               	retlw	114	;'r'
   340  006B  3420               	retlw	32	;' '
   341  006C  3450               	retlw	80	;'P'
   342  006D  344F               	retlw	79	;'O'
   343  006E  3452               	retlw	82	;'R'
   344  006F  3454               	retlw	84	;'T'
   345  0070  3441               	retlw	65	;'A'
   346  0071  3420               	retlw	32	;' '
   347  0072  340D               	retlw	13
   348  0073  3400               	retlw	0
   349                           
   350                           	psect	cinit
   351  07FC                     start_initialization:	
   352                           ; #config settings
   353                           
   354  07FC                     __initialization:
   355  07FC                     end_of_initialization:	
   356                           ;End of C runtime variable initialization code
   357                           
   358  07FC                     __end_of__initialization:
   359  07FC  0183               	clrf	3
   360  07FD  120A  118A  2FCD   	ljmp	_main	;jump to C main() function
   361                           
   362                           	psect	cstackCOMMON
   363  0070                     __pcstackCOMMON:
   364  0070                     ?_setup:
   365  0070                     ??_setup:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0070                     ?_str:	
   369                           ; 1 bytes @ 0x0
   370                           
   371  0070                     ?_main:	
   372                           ; 1 bytes @ 0x0
   373                           
   374  0070                     ?_send_char:	
   375                           ; 1 bytes @ 0x0
   376                           
   377  0070                     ??_send_char:	
   378                           ; 1 bytes @ 0x0
   379                           
   380  0070                     send_char@i:	
   381                           ; 1 bytes @ 0x0
   382                           
   383                           
   384                           ; 1 bytes @ 0x0
   385  0070                     	ds	1
   386  0071                     ??_str:
   387  0071                     str@d:	
   388                           ; 1 bytes @ 0x1
   389                           
   390                           
   391                           ; 2 bytes @ 0x1
   392  0071                     	ds	2
   393  0073                     str@str:
   394                           
   395                           ; 1 bytes @ 0x3
   396  0073                     	ds	1
   397  0074                     ??_main:
   398                           
   399                           ; 1 bytes @ 0x4
   400  0074                     	ds	2
   401                           
   402                           	psect	maintext
   403  07CD                     __pmaintext:	
   404 ;;
   405 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   406 ;;
   407 ;; *************** function _main *****************
   408 ;; Defined at:
   409 ;;		line 36 in file "ASCII.c"
   410 ;; Parameters:    Size  Location     Type
   411 ;;		None
   412 ;; Auto vars:     Size  Location     Type
   413 ;;		None
   414 ;; Return value:  Size  Location     Type
   415 ;;                  1    wreg      void 
   416 ;; Registers used:
   417 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   418 ;; Tracked objects:
   419 ;;		On entry : B00/0
   420 ;;		On exit  : 0/0
   421 ;;		Unchanged: 0/0
   422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   423 ;;      Params:         0       0       0       0       0
   424 ;;      Locals:         0       0       0       0       0
   425 ;;      Temps:          2       0       0       0       0
   426 ;;      Totals:         2       0       0       0       0
   427 ;;Total ram usage:        2 bytes
   428 ;; Hardware stack levels required when called:    2
   429 ;; This function calls:
   430 ;;		_setup
   431 ;;		_str
   432 ;; This function is called by:
   433 ;;		Startup code after reset
   434 ;; This function uses a non-reentrant model
   435 ;;
   436                           
   437                           
   438                           ;psect for function _main
   439  07CD                     _main:
   440  07CD                     l724:	
   441                           ;incstack = 0
   442                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   443                           
   444                           
   445                           ;ASCII.c: 37:     setup();
   446  07CD  120A  118A  27A4  120A  118A  	fcall	_setup
   447  07D2                     l726:
   448                           
   449                           ;ASCII.c: 41:         _delay((unsigned long)((500)*(1000000/4000.0)));
   450  07D2  30A3               	movlw	163
   451  07D3  00F5               	movwf	??_main+1
   452  07D4  3055               	movlw	85
   453  07D5  00F4               	movwf	??_main
   454  07D6                     u67:
   455  07D6  0BF4               	decfsz	??_main,f
   456  07D7  2FD6               	goto	u67
   457  07D8  0BF5               	decfsz	??_main+1,f
   458  07D9  2FD6               	goto	u67
   459  07DA                     l728:
   460                           
   461                           ;ASCII.c: 42:         str("Â¿Que acciÃ³n desea ejecutar? \r");
   462  07DA  3025               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   463  07DB  120A  118A  277F  120A  118A  	fcall	_str
   464  07E0                     l730:
   465                           
   466                           ;ASCII.c: 43:         str("1) Desplegar cadena de caracteres \r");
   467  07E0  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   468  07E1  120A  118A  277F  120A  118A  	fcall	_str
   469  07E6                     l732:
   470                           
   471                           ;ASCII.c: 44:         str("2) Cambiar PORTA \r");
   472  07E6  3059               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   473  07E7  120A  118A  277F  120A  118A  	fcall	_str
   474  07EC                     l734:
   475                           
   476                           ;ASCII.c: 45:         str("3) Cambiar PORTD \r\r");
   477  07EC  3045               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   478  07ED  120A  118A  277F  120A  118A  	fcall	_str
   479  07F2                     l46:	
   480                           ;ASCII.c: 47:         while(!PIR1bits.RCIF);
   481                           
   482  07F2  1283               	bcf	3,5	;RP0=0, select bank0
   483  07F3  1303               	bcf	3,6	;RP1=0, select bank0
   484  07F4  1E8C               	btfss	12,5	;volatile
   485  07F5  2FF7               	goto	u51
   486  07F6  2FF8               	goto	u50
   487  07F7                     u51:
   488  07F7  2FF2               	goto	l46
   489  07F8                     u50:
   490  07F8  2FD2               	goto	l726
   491  07F9  120A  118A  2800   	ljmp	start
   492  07FC                     __end_of_main:
   493                           
   494                           	psect	text1
   495  077F                     __ptext1:	
   496 ;; *************** function _str *****************
   497 ;; Defined at:
   498 ;;		line 98 in file "ASCII.c"
   499 ;; Parameters:    Size  Location     Type
   500 ;;  str             1    wreg     PTR unsigned char 
   501 ;;		 -> STR_4(20), STR_3(19), STR_2(36), STR_1(32), 
   502 ;; Auto vars:     Size  Location     Type
   503 ;;  str             1    3[COMMON] PTR unsigned char 
   504 ;;		 -> STR_4(20), STR_3(19), STR_2(36), STR_1(32), 
   505 ;;  d               2    1[COMMON] int 
   506 ;; Return value:  Size  Location     Type
   507 ;;                  1    wreg      void 
   508 ;; Registers used:
   509 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   510 ;; Tracked objects:
   511 ;;		On entry : 0/0
   512 ;;		On exit  : 0/0
   513 ;;		Unchanged: 0/0
   514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   515 ;;      Params:         0       0       0       0       0
   516 ;;      Locals:         3       0       0       0       0
   517 ;;      Temps:          0       0       0       0       0
   518 ;;      Totals:         3       0       0       0       0
   519 ;;Total ram usage:        3 bytes
   520 ;; Hardware stack levels used:    1
   521 ;; Hardware stack levels required when called:    1
   522 ;; This function calls:
   523 ;;		_send_char
   524 ;; This function is called by:
   525 ;;		_main
   526 ;; This function uses a non-reentrant model
   527 ;;
   528                           
   529                           
   530                           ;psect for function _str
   531  077F                     _str:
   532                           
   533                           ;incstack = 0
   534                           ; Regs used in _str: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   535                           ;str@str stored from wreg
   536  077F  00F3               	movwf	str@str
   537  0780                     l716:
   538                           
   539                           ;ASCII.c: 99:     int d = 0;
   540  0780  01F1               	clrf	str@d
   541  0781  01F2               	clrf	str@d+1
   542                           
   543                           ;ASCII.c: 101:     while (str[d] != 0){
   544  0782  2F96               	goto	l722
   545  0783                     l718:
   546                           
   547                           ;ASCII.c: 102:         send_char(str[d]);
   548  0783  0871               	movf	str@d,w
   549  0784  0773               	addwf	str@str,w
   550  0785  0084               	movwf	4
   551  0786  120A  118A  2003  120A  118A  	fcall	stringdir
   552  078B  120A  118A  2774  120A  118A  	fcall	_send_char
   553  0790                     l720:
   554                           
   555                           ;ASCII.c: 103:         d++;
   556  0790  3001               	movlw	1
   557  0791  07F1               	addwf	str@d,f
   558  0792  1803               	skipnc
   559  0793  0AF2               	incf	str@d+1,f
   560  0794  3000               	movlw	0
   561  0795  07F2               	addwf	str@d+1,f
   562  0796                     l722:
   563                           
   564                           ;ASCII.c: 101:     while (str[d] != 0){
   565  0796  0871               	movf	str@d,w
   566  0797  0773               	addwf	str@str,w
   567  0798  0084               	movwf	4
   568  0799  120A  118A  2003  120A  118A  	fcall	stringdir
   569  079E  3A00               	xorlw	0
   570  079F  1D03               	skipz
   571  07A0  2FA2               	goto	u41
   572  07A1  2FA3               	goto	u40
   573  07A2                     u41:
   574  07A2  2F83               	goto	l718
   575  07A3                     u40:
   576  07A3                     l66:
   577  07A3  0008               	return
   578  07A4                     __end_of_str:
   579                           
   580                           	psect	text2
   581  0774                     __ptext2:	
   582 ;; *************** function _send_char *****************
   583 ;; Defined at:
   584 ;;		line 91 in file "ASCII.c"
   585 ;; Parameters:    Size  Location     Type
   586 ;;  i               1    wreg     unsigned char 
   587 ;; Auto vars:     Size  Location     Type
   588 ;;  i               1    0[COMMON] unsigned char 
   589 ;; Return value:  Size  Location     Type
   590 ;;                  1    wreg      void 
   591 ;; Registers used:
   592 ;;		wreg
   593 ;; Tracked objects:
   594 ;;		On entry : 0/0
   595 ;;		On exit  : 0/0
   596 ;;		Unchanged: 0/0
   597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   598 ;;      Params:         0       0       0       0       0
   599 ;;      Locals:         1       0       0       0       0
   600 ;;      Temps:          0       0       0       0       0
   601 ;;      Totals:         1       0       0       0       0
   602 ;;Total ram usage:        1 bytes
   603 ;; Hardware stack levels used:    1
   604 ;; This function calls:
   605 ;;		Nothing
   606 ;; This function is called by:
   607 ;;		_str
   608 ;; This function uses a non-reentrant model
   609 ;;
   610                           
   611                           
   612                           ;psect for function _send_char
   613  0774                     _send_char:
   614                           
   615                           ;incstack = 0
   616                           ; Regs used in _send_char: [wreg]
   617                           ;send_char@i stored from wreg
   618  0774  00F0               	movwf	send_char@i
   619  0775                     l658:
   620                           
   621                           ;ASCII.c: 92:     while(PIR1bits.TXIF){
   622  0775  2F78               	goto	l662
   623  0776                     l660:
   624                           
   625                           ;ASCII.c: 93:         TXREG = i;
   626  0776  0870               	movf	send_char@i,w
   627  0777  0099               	movwf	25	;volatile
   628  0778                     l662:
   629                           
   630                           ;ASCII.c: 92:     while(PIR1bits.TXIF){
   631  0778  1283               	bcf	3,5	;RP0=0, select bank0
   632  0779  1303               	bcf	3,6	;RP1=0, select bank0
   633  077A  1A0C               	btfsc	12,4	;volatile
   634  077B  2F7D               	goto	u11
   635  077C  2F7E               	goto	u10
   636  077D                     u11:
   637  077D  2F76               	goto	l660
   638  077E                     u10:
   639  077E                     l60:
   640  077E  0008               	return
   641  077F                     __end_of_send_char:
   642                           
   643                           	psect	text3
   644  07A4                     __ptext3:	
   645 ;; *************** function _setup *****************
   646 ;; Defined at:
   647 ;;		line 54 in file "ASCII.c"
   648 ;; Parameters:    Size  Location     Type
   649 ;;		None
   650 ;; Auto vars:     Size  Location     Type
   651 ;;		None
   652 ;; Return value:  Size  Location     Type
   653 ;;                  1    wreg      void 
   654 ;; Registers used:
   655 ;;		wreg, status,2
   656 ;; Tracked objects:
   657 ;;		On entry : 0/0
   658 ;;		On exit  : 0/0
   659 ;;		Unchanged: 0/0
   660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   661 ;;      Params:         0       0       0       0       0
   662 ;;      Locals:         0       0       0       0       0
   663 ;;      Temps:          0       0       0       0       0
   664 ;;      Totals:         0       0       0       0       0
   665 ;;Total ram usage:        0 bytes
   666 ;; Hardware stack levels used:    1
   667 ;; This function calls:
   668 ;;		Nothing
   669 ;; This function is called by:
   670 ;;		_main
   671 ;; This function uses a non-reentrant model
   672 ;;
   673                           
   674                           
   675                           ;psect for function _setup
   676  07A4                     _setup:
   677  07A4                     l664:	
   678                           ;incstack = 0
   679                           ; Regs used in _setup: [wreg+status,2]
   680                           
   681                           
   682                           ;ASCII.c: 56:     ANSEL = 0x00;
   683  07A4  1683               	bsf	3,5	;RP0=1, select bank3
   684  07A5  1703               	bsf	3,6	;RP1=1, select bank3
   685  07A6  0188               	clrf	8	;volatile
   686                           
   687                           ;ASCII.c: 57:     ANSELH = 0x00;
   688  07A7  0189               	clrf	9	;volatile
   689                           
   690                           ;ASCII.c: 59:     TRISC = 0x00;
   691  07A8  1683               	bsf	3,5	;RP0=1, select bank1
   692  07A9  1303               	bcf	3,6	;RP1=0, select bank1
   693  07AA  0187               	clrf	7	;volatile
   694  07AB                     l666:
   695                           
   696                           ;ASCII.c: 60:     TRISCbits.TRISC7 = 1;
   697  07AB  1787               	bsf	7,7	;volatile
   698                           
   699                           ;ASCII.c: 61:     TRISA = 0x00;
   700  07AC  0185               	clrf	5	;volatile
   701                           
   702                           ;ASCII.c: 62:     TRISD = 0x00;
   703  07AD  0188               	clrf	8	;volatile
   704                           
   705                           ;ASCII.c: 64:     PORTA = 0;
   706  07AE  1283               	bcf	3,5	;RP0=0, select bank0
   707  07AF  1303               	bcf	3,6	;RP1=0, select bank0
   708  07B0  0185               	clrf	5	;volatile
   709                           
   710                           ;ASCII.c: 65:     PORTC = 0;
   711  07B1  0187               	clrf	7	;volatile
   712                           
   713                           ;ASCII.c: 66:     PORTD = 0;
   714  07B2  0188               	clrf	8	;volatile
   715  07B3                     l668:
   716                           
   717                           ;ASCII.c: 69:     OSCCONbits.IRCF2 =1;
   718  07B3  1683               	bsf	3,5	;RP0=1, select bank1
   719  07B4  1303               	bcf	3,6	;RP1=0, select bank1
   720  07B5  170F               	bsf	15,6	;volatile
   721  07B6                     l670:
   722                           
   723                           ;ASCII.c: 70:     OSCCONbits.IRCF1 =0;
   724  07B6  128F               	bcf	15,5	;volatile
   725  07B7                     l672:
   726                           
   727                           ;ASCII.c: 71:     OSCCONbits.IRCF0 =0;
   728  07B7  120F               	bcf	15,4	;volatile
   729  07B8                     l674:
   730                           
   731                           ;ASCII.c: 72:     OSCCONbits.SCS =1;
   732  07B8  140F               	bsf	15,0	;volatile
   733  07B9                     l676:
   734                           
   735                           ;ASCII.c: 75:     TXSTAbits.TX9 = 0;
   736  07B9  1318               	bcf	24,6	;volatile
   737  07BA                     l678:
   738                           
   739                           ;ASCII.c: 77:     TXSTAbits.SYNC = 0;
   740  07BA  1218               	bcf	24,4	;volatile
   741  07BB                     l680:
   742                           
   743                           ;ASCII.c: 78:     BAUDCTLbits.BRG16 = 1;
   744  07BB  1683               	bsf	3,5	;RP0=1, select bank3
   745  07BC  1703               	bsf	3,6	;RP1=1, select bank3
   746  07BD  1587               	bsf	7,3	;volatile
   747  07BE                     l682:
   748                           
   749                           ;ASCII.c: 79:     TXSTAbits.BRGH = 1;
   750  07BE  1683               	bsf	3,5	;RP0=1, select bank1
   751  07BF  1303               	bcf	3,6	;RP1=0, select bank1
   752  07C0  1518               	bsf	24,2	;volatile
   753  07C1                     l684:
   754                           
   755                           ;ASCII.c: 81:     SPBRG = 25;
   756  07C1  3019               	movlw	25
   757  07C2  0099               	movwf	25	;volatile
   758  07C3                     l686:
   759                           
   760                           ;ASCII.c: 82:     SPBRGH = 0;
   761  07C3  019A               	clrf	26	;volatile
   762  07C4                     l688:
   763                           
   764                           ;ASCII.c: 84:     RCSTAbits.SPEN = 1;
   765  07C4  1283               	bcf	3,5	;RP0=0, select bank0
   766  07C5  1303               	bcf	3,6	;RP1=0, select bank0
   767  07C6  1798               	bsf	24,7	;volatile
   768  07C7                     l690:
   769                           
   770                           ;ASCII.c: 85:     RCSTAbits.RX9 = 0;
   771  07C7  1318               	bcf	24,6	;volatile
   772  07C8                     l692:
   773                           
   774                           ;ASCII.c: 86:     RCSTAbits.CREN = 1;
   775  07C8  1618               	bsf	24,4	;volatile
   776  07C9                     l694:
   777                           
   778                           ;ASCII.c: 87:     TXSTAbits.TXEN = 1;
   779  07C9  1683               	bsf	3,5	;RP0=1, select bank1
   780  07CA  1303               	bcf	3,6	;RP1=0, select bank1
   781  07CB  1698               	bsf	24,5	;volatile
   782  07CC                     l54:
   783  07CC  0008               	return
   784  07CD                     __end_of_setup:
   785  007E                     btemp	set	126	;btemp
   786  007E                     wtemp0	set	126
   787                           
   788                           	psect	config
   789                           
   790                           ;Config register CONFIG1 @ 0x2007
   791                           ;	Oscillator Selection bits
   792                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
   793                           ;	Watchdog Timer Enable bit
   794                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   795                           ;	Power-up Timer Enable bit
   796                           ;	PWRTE = OFF, PWRT disabled
   797                           ;	RE3/MCLR pin function select bit
   798                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
   799                           ;	Code Protection bit
   800                           ;	CP = OFF, Program memory code protection is disabled
   801                           ;	Data Code Protection bit
   802                           ;	CPD = OFF, Data memory code protection is disabled
   803                           ;	Brown Out Reset Selection bits
   804                           ;	BOREN = OFF, BOR disabled
   805                           ;	Internal External Switchover bit
   806                           ;	IESO = OFF, Internal/External Switchover mode is disabled
   807                           ;	Fail-Safe Clock Monitor Enabled bit
   808                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
   809                           ;	Low Voltage Programming Enable bit
   810                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   811                           ;	In-Circuit Debugger Mode bit
   812                           ;	DEBUG = 0x1, unprogrammed default
   813  2007                     	org	8199
   814  2007  20D4               	dw	8404
   815                           
   816                           ;Config register CONFIG2 @ 0x2008
   817                           ;	Brown-out Reset Selection bit
   818                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
   819                           ;	Flash Program Memory Self Write Enable bits
   820                           ;	WRT = OFF, Write protection off
   821  2008                     	org	8200
   822  2008  3FFF               	dw	16383

Data Sizes:
    Strings     107
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       6
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    str@str	PTR unsigned char  size(1) Largest target is 36
		 -> STR_4(CODE[20]), STR_3(CODE[19]), STR_2(CODE[36]), STR_1(CODE[32]), 


Critical Paths under _main in COMMON

    _main->_str
    _str->_send_char

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     237
                                              4 COMMON     2     2      0
                              _setup
                                _str
 ---------------------------------------------------------------------------------
 (1) _str                                                  3     3      0     237
                                              1 COMMON     3     3      0
                          _send_char
 ---------------------------------------------------------------------------------
 (2) _send_char                                            1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
   _str
     _send_char

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       6       1       42.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Sun May 09 19:43:42 2021

                      pc 0002                       l60 077E                       l54 07CC  
                     l46 07F2                       l66 07A3                       u10 077E  
                     u11 077D                       u40 07A3                       u41 07A2  
                     u50 07F8                       u51 07F7                       u67 07D6  
                     fsr 0004                      l720 0790                      l722 0796  
                    l730 07E0                      l660 0776                      l716 0780  
                    l732 07E6                      l724 07CD                      l670 07B6  
                    l662 0778                      l718 0783                      l734 07EC  
                    l726 07D2                      l680 07BB                      l672 07B7  
                    l664 07A4                      l728 07DA                      l690 07C7  
                    l682 07BE                      l674 07B8                      l666 07AB  
                    l658 0775                      l692 07C8                      l684 07C1  
                    l676 07B9                      l668 07B3                      l694 07C9  
                    l686 07C3                      l678 07BA                      l688 07C4  
                    fsr0 0004                      _str 077F                     STR_1 002D  
                   STR_2 0009                     STR_3 0061                     STR_4 004D  
                   ?_str 0070                     _main 07CD                     btemp 007E  
                   str@d 0071                     start 0000                    ??_str 0071  
                  ?_main 0070                    _ANSEL 0188                    _SPBRG 0099  
                  _PORTA 0005                    _PORTC 0007                    _PORTD 0008  
                  _TRISA 0085                    _TRISC 0087                    _TRISD 0088  
                  _TXREG 0019                    _setup 07A4                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 07FC  
           __end_of_main 07FC                   ??_main 0074                   ?_setup 0070  
                 _ANSELH 0189                   _SPBRGH 009A                   str@str 0073  
__end_of__initialization 07FC           __pcstackCOMMON 0070            __end_of_setup 07CD  
                ??_setup 0070               __pmaintext 07CD       __size_of_send_char 000B  
             __stringtab 0003                  __ptext1 077F                  __ptext2 0774  
                __ptext3 07A4             __size_of_str 0025     end_of_initialization 07FC  
      __end_of_send_char 077F                _RCSTAbits 0018                _TRISCbits 0087  
              _TXSTAbits 0098              _BAUDCTLbits 0187      start_initialization 07FC  
            __end_of_str 07A4                ___latbits 0002                __pstrings 0003  
             send_char@i 0070           __size_of_setup 0029                _send_char 0774  
               _PIR1bits 000C              __stringbase 0008               ?_send_char 0070  
     __end_of__stringtab 0009            __size_of_main 002F              ??_send_char 0070  
              stringcode 0003               _OSCCONbits 008F                 stringdir 0003  
               stringtab 0003  
